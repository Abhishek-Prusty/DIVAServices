#!/usr/bin/env node
"use strict";

var nconf = require("nconf");

nconf.add("server", { type: "file", file: "./conf/server." + process.env.NODE_ENV + ".json" });
nconf.add("baseImages", { type: "file", file: "./conf/baseImages.json" });
nconf.add("detailsAlgorithmSchema", { type: "file", file: "./conf/schemas/detailsAlgorithmSchema.json" });
nconf.add("generalAlgorithmSchema", { type: "file", file: "./conf/schemas/generalAlgorithmSchema.json" });
nconf.add("hostSchema", { type: "file", file: "./conf/schemas/hostSchema.json" });
nconf.add("responseSchema", { type: "file", file: "./conf/schemas/responseSchema.json" });
nconf.add("createSchema", { type: "file", file: "./conf/schemas/createAlgorithmSchema.json" });

var logger = require("../src/logging/logger");


//module dependencies.
var app = require("../src/server");
var debug = require("debug")("express:server");
var http = require("http");
var cmdArgs = require("command-line-args");
var getUsage = require("command-line-usage");
var isNullOrUndefined = require('util').isNullOrUndefined;
//Define command line options
const optionDefinitions = [
  {
    name: "help",
    alias: 'h',
    type: Boolean,
    description: "Display the usage guide"
  },
  {
    name: 'dockerIp',
    type: String,
    description: "The ip address of the docker machine to use"
  },
  {
    name: 'dockerPort',
    type: String,
    description: "The port of the docker machine to use"
  },
  {
    name: 'dockerReport',
    type: String,
    description: "IP address/port combination docker containers can use to send results to"
  },
  {
    name: 'rootIp',
    type: String,
    description: "The ip address/port combination under which DIVAServices will be exposed (e.g. divaservices.unifr.ch/api/v2)"
  }, 
  {
    name: 'sshUser',
    type: String,
    description: "The ssh user to access the docker client"
  },
  {
    name: 'sshPass',
    type: String,
    description: "The ssh password to access the docker client"
  }
]

const sections = [
  {
    header: "DIVAServices",
    content: "DIVAServices is a RESTFul web server backend for providing Document Image Analysis methods as Web Services"
  },
  {
    header: "Options",
    optionList: optionDefinitions
  },
  {
    content: "Project home: [underline]{https://github.com/lunactic/DIVAServices}"
  }
]

const options = cmdArgs(optionDefinitions);
const usage = getUsage(sections);

if (options.help || Object.keys(options).length <= 5) {
  console.log(usage);
  process.exit();
}

app.initParams(options);
//get port from environment and store in Express.
var port = normalizePort(nconf.get("server:httpPort") || 8080);
//app.set("port", port);


//create http server
var server = http.createServer(app.app);
server.timeout = nconf.get("server:timeout");
//listen on provided ports
server.listen(port);

//add error handler
server.on("error", onError);

//start listening on port
server.on("listening", onListening);

logger.Logger.log("info", "server started", "www");

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string"
    ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string"
    ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}

module.exports = app.app;